// This file is hand mangled of a ODE header file.
// See copyright in src/ode/ode.d (BSD).
module lib.ode.objects;

import lib.ode.common;
import lib.ode.mass;
import lib.ode.contact;

version(DynamicODE)
{
import lib.loader;

void loadODE_Objects(Loader l)
{
	loadFunc!(dWorldCreate)(l);
	loadFunc!(dWorldDestroy)(l);
	loadFunc!(dWorldSetGravity)(l);
	loadFunc!(dWorldGetGravity)(l);
	loadFunc!(dWorldSetERP)(l);
	loadFunc!(dWorldGetERP)(l);
	loadFunc!(dWorldSetCFM)(l);
	loadFunc!(dWorldGetCFM)(l);
	loadFunc!(dWorldStep)(l);
	loadFunc!(dWorldImpulseToForce)(l);
	loadFunc!(dWorldQuickStep)(l);
	loadFunc!(dWorldSetQuickStepNumIterations)(l);
	loadFunc!(dWorldGetQuickStepNumIterations)(l);
	loadFunc!(dWorldSetQuickStepW)(l);
	loadFunc!(dWorldGetQuickStepW)(l);
	loadFunc!(dWorldSetContactMaxCorrectingVel)(l);
	loadFunc!(dWorldGetContactMaxCorrectingVel)(l);
	loadFunc!(dWorldSetContactSurfaceLayer)(l);
	loadFunc!(dWorldGetContactSurfaceLayer)(l);
	loadFunc!(dWorldStepFast1)(l);
	loadFunc!(dWorldSetAutoEnableDepthSF1)(l);
	loadFunc!(dWorldGetAutoEnableDepthSF1)(l);
	loadFunc!(dWorldGetAutoDisableLinearThreshold)(l);
	loadFunc!(dWorldSetAutoDisableLinearThreshold)(l);
	loadFunc!(dWorldGetAutoDisableAngularThreshold)(l);
	loadFunc!(dWorldSetAutoDisableAngularThreshold)(l);
//	loadFunc!(dWorldGetAutoDisableLinearAverageThreshold)(l);
//	loadFunc!(dWorldSetAutoDisableLinearAverageThreshold)(l);
//	loadFunc!(dWorldGetAutoDisableAngularAverageThreshold)(l);
//	loadFunc!(dWorldSetAutoDisableAngularAverageThreshold)(l);
	loadFunc!(dWorldGetAutoDisableAverageSamplesCount)(l);
	loadFunc!(dWorldSetAutoDisableAverageSamplesCount)(l);
	loadFunc!(dWorldGetAutoDisableSteps)(l);
	loadFunc!(dWorldSetAutoDisableSteps)(l);
	loadFunc!(dWorldGetAutoDisableTime)(l);
	loadFunc!(dWorldSetAutoDisableTime)(l);
	loadFunc!(dWorldGetAutoDisableFlag)(l);
	loadFunc!(dWorldSetAutoDisableFlag)(l);
	loadFunc!(dBodyGetAutoDisableLinearThreshold)(l);
	loadFunc!(dBodySetAutoDisableLinearThreshold)(l);
	loadFunc!(dBodyGetAutoDisableAngularThreshold)(l);
	loadFunc!(dBodySetAutoDisableAngularThreshold)(l);
	loadFunc!(dBodyGetAutoDisableAverageSamplesCount)(l);
	loadFunc!(dBodySetAutoDisableAverageSamplesCount)(l);
	loadFunc!(dBodyGetAutoDisableSteps)(l);
	loadFunc!(dBodySetAutoDisableSteps)(l);
	loadFunc!(dBodyGetAutoDisableTime)(l);
	loadFunc!(dBodySetAutoDisableTime)(l);
	loadFunc!(dBodyGetAutoDisableFlag)(l);
	loadFunc!(dBodySetAutoDisableFlag)(l);
	loadFunc!(dBodySetAutoDisableDefaults)(l);
	loadFunc!(dBodyGetWorld)(l);
	loadFunc!(dBodyCreate)(l);
	loadFunc!(dBodyDestroy)(l);
	loadFunc!(dBodySetData)(l);
	loadFunc!(dBodyGetData)(l);
	loadFunc!(dBodySetPosition)(l);
	loadFunc!(dBodySetRotation)(l);
	loadFunc!(dBodySetQuaternion)(l);
	loadFunc!(dBodySetLinearVel)(l);
	loadFunc!(dBodySetAngularVel)(l);
	loadFunc!(dBodyGetPosition)(l);
	loadFunc!(dBodyCopyPosition)(l);
	loadFunc!(dBodyGetRotation)(l);
	loadFunc!(dBodyCopyRotation)(l);
	loadFunc!(dBodyGetQuaternion)(l);
	loadFunc!(dBodyCopyQuaternion)(l);
	loadFunc!(dBodyGetLinearVel)(l);
	loadFunc!(dBodyGetAngularVel)(l);
	loadFunc!(dBodySetMass)(l);
	loadFunc!(dBodyGetMass)(l);
	loadFunc!(dBodyAddForce)(l);
	loadFunc!(dBodyAddTorque)(l);
	loadFunc!(dBodyAddRelForce)(l);
	loadFunc!(dBodyAddRelTorque)(l);
	loadFunc!(dBodyAddForceAtPos)(l);
	loadFunc!(dBodyAddForceAtRelPos)(l);
	loadFunc!(dBodyAddRelForceAtPos)(l);
	loadFunc!(dBodyAddRelForceAtRelPos)(l);
	loadFunc!(dBodyGetForce)(l);
	loadFunc!(dBodyGetTorque)(l);
	loadFunc!(dBodySetForce)(l);
	loadFunc!(dBodySetTorque)(l);
	loadFunc!(dBodyGetRelPointPos)(l);
	loadFunc!(dBodyGetRelPointVel)(l);
	loadFunc!(dBodyGetPointVel)(l);
	loadFunc!(dBodyGetPosRelPoint)(l);
	loadFunc!(dBodyVectorToWorld)(l);
	loadFunc!(dBodyVectorFromWorld)(l);
	loadFunc!(dBodySetFiniteRotationMode)(l);
	loadFunc!(dBodySetFiniteRotationAxis)(l);
	loadFunc!(dBodyGetFiniteRotationMode)(l);
	loadFunc!(dBodyGetFiniteRotationAxis)(l);
	loadFunc!(dBodyGetNumJoints)(l);
	loadFunc!(dBodyGetJoint)(l);
	loadFunc!(dBodyEnable)(l);
	loadFunc!(dBodyDisable)(l);
	loadFunc!(dBodyIsEnabled)(l);
	loadFunc!(dBodySetGravityMode)(l);
	loadFunc!(dBodyGetGravityMode)(l);
	loadFunc!(dJointCreateBall)(l);
	loadFunc!(dJointCreateHinge)(l);
	loadFunc!(dJointCreateSlider)(l);
	loadFunc!(dJointCreateContact)(l);
	loadFunc!(dJointCreateHinge2)(l);
	loadFunc!(dJointCreateUniversal)(l);
	loadFunc!(dJointCreatePR)(l);
	loadFunc!(dJointCreateFixed)(l);
	loadFunc!(dJointCreateNull)(l);
	loadFunc!(dJointCreateAMotor)(l);
	loadFunc!(dJointCreateLMotor)(l);
	loadFunc!(dJointCreatePlane2D)(l);
	loadFunc!(dJointDestroy)(l);
	loadFunc!(dJointGroupCreate)(l);
	loadFunc!(dJointGroupDestroy)(l);
	loadFunc!(dJointGroupEmpty)(l);
	loadFunc!(dJointAttach)(l);
	loadFunc!(dJointSetData)(l);
	loadFunc!(dJointGetData)(l);
	loadFunc!(dJointGetType)(l);
	loadFunc!(dJointGetBody)(l);
	loadFunc!(dJointSetFeedback)(l);
	loadFunc!(dJointGetFeedback)(l);
	loadFunc!(dJointSetBallAnchor)(l);
	loadFunc!(dJointSetBallAnchor2)(l);
//	loadFunc!(dJointSetBallParam)(l);
	loadFunc!(dJointSetHingeAnchor)(l);
	loadFunc!(dJointSetHingeAnchorDelta)(l);
	loadFunc!(dJointSetHingeAxis)(l);
	loadFunc!(dJointSetHingeParam)(l);
	loadFunc!(dJointAddHingeTorque)(l);
	loadFunc!(dJointSetSliderAxis)(l);
	loadFunc!(dJointSetSliderAxisDelta)(l);
	loadFunc!(dJointSetSliderParam)(l);
	loadFunc!(dJointAddSliderForce)(l);
	loadFunc!(dJointSetHinge2Anchor)(l);
	loadFunc!(dJointSetHinge2Axis1)(l);
	loadFunc!(dJointSetHinge2Axis2)(l);
	loadFunc!(dJointSetHinge2Param)(l);
	loadFunc!(dJointAddHinge2Torques)(l);
	loadFunc!(dJointSetUniversalAnchor)(l);
	loadFunc!(dJointSetUniversalAxis1)(l);
	loadFunc!(dJointSetUniversalAxis2)(l);
	loadFunc!(dJointSetUniversalParam)(l);
	loadFunc!(dJointAddUniversalTorques)(l);
	loadFunc!(dJointSetPRAnchor)(l);
	loadFunc!(dJointSetPRAxis1)(l);
	loadFunc!(dJointSetPRAxis2)(l);
	loadFunc!(dJointSetPRParam)(l);
	loadFunc!(dJointAddPRTorque)(l);
	loadFunc!(dJointSetFixed)(l);
//	loadFunc!(dJointSetFixedParam)(l);
	loadFunc!(dJointSetAMotorNumAxes)(l);
	loadFunc!(dJointSetAMotorAxis)(l);
	loadFunc!(dJointSetAMotorAngle)(l);
	loadFunc!(dJointSetAMotorParam)(l);
	loadFunc!(dJointSetAMotorMode)(l);
	loadFunc!(dJointAddAMotorTorques)(l);
	loadFunc!(dJointSetLMotorNumAxes)(l);
	loadFunc!(dJointSetLMotorAxis)(l);
	loadFunc!(dJointSetLMotorParam)(l);
	loadFunc!(dJointSetPlane2DXParam)(l);
	loadFunc!(dJointSetPlane2DYParam)(l);
	loadFunc!(dJointSetPlane2DAngleParam)(l);
	loadFunc!(dJointGetBallAnchor)(l);
	loadFunc!(dJointGetBallAnchor2)(l);
//	loadFunc!(dJointGetBallParam)(l);
	loadFunc!(dJointGetHingeAnchor)(l);
	loadFunc!(dJointGetHingeAnchor2)(l);
	loadFunc!(dJointGetHingeAxis)(l);
	loadFunc!(dJointGetHingeParam)(l);
	loadFunc!(dJointGetHingeAngle)(l);
	loadFunc!(dJointGetHingeAngleRate)(l);
	loadFunc!(dJointGetSliderPosition)(l);
	loadFunc!(dJointGetSliderPositionRate)(l);
	loadFunc!(dJointGetSliderAxis)(l);
	loadFunc!(dJointGetSliderParam)(l);
	loadFunc!(dJointGetHinge2Anchor)(l);
	loadFunc!(dJointGetHinge2Anchor2)(l);
	loadFunc!(dJointGetHinge2Axis1)(l);
	loadFunc!(dJointGetHinge2Axis2)(l);
	loadFunc!(dJointGetHinge2Param)(l);
	loadFunc!(dJointGetHinge2Angle1)(l);
	loadFunc!(dJointGetHinge2Angle1Rate)(l);
	loadFunc!(dJointGetHinge2Angle2Rate)(l);
	loadFunc!(dJointGetUniversalAnchor)(l);
	loadFunc!(dJointGetUniversalAnchor2)(l);
	loadFunc!(dJointGetUniversalAxis1)(l);
	loadFunc!(dJointGetUniversalAxis2)(l);
	loadFunc!(dJointGetUniversalParam)(l);
	loadFunc!(dJointGetUniversalAngles)(l);
	loadFunc!(dJointGetUniversalAngle1)(l);
	loadFunc!(dJointGetUniversalAngle2)(l);
	loadFunc!(dJointGetUniversalAngle1Rate)(l);
	loadFunc!(dJointGetUniversalAngle2Rate)(l);
	loadFunc!(dJointGetPRAnchor)(l);
	loadFunc!(dJointGetPRPosition)(l);
	loadFunc!(dJointGetPRPositionRate)(l);
	loadFunc!(dJointGetPRAxis1)(l);
	loadFunc!(dJointGetPRAxis2)(l);
	loadFunc!(dJointGetPRParam)(l);
	loadFunc!(dJointGetAMotorNumAxes)(l);
	loadFunc!(dJointGetAMotorAxis)(l);
	loadFunc!(dJointGetAMotorAxisRel)(l);
	loadFunc!(dJointGetAMotorAngle)(l);
	loadFunc!(dJointGetAMotorAngleRate)(l);
	loadFunc!(dJointGetAMotorParam)(l);
	loadFunc!(dJointGetAMotorMode)(l);
	loadFunc!(dJointGetLMotorNumAxes)(l);
	loadFunc!(dJointGetLMotorAxis)(l);
	loadFunc!(dJointGetLMotorParam)(l);
//	loadFunc!(dJointGetFixedParam)(l);
	loadFunc!(dConnectingJoint)(l);
	loadFunc!(dConnectingJointList)(l);
	loadFunc!(dAreConnected)(l);
	loadFunc!(dAreConnectedExcluding)(l);
}

extern(C):
dWorldID (*dWorldCreate)();
void (*dWorldDestroy)(dWorldID world);
void (*dWorldSetGravity)(dWorldID, dReal x, dReal y, dReal z);
void (*dWorldGetGravity)(dWorldID, dVector3 gravity);
void (*dWorldSetERP)(dWorldID, dReal erp);
dReal (*dWorldGetERP)(dWorldID);
void (*dWorldSetCFM)(dWorldID, dReal cfm);
dReal (*dWorldGetCFM)(dWorldID);
void (*dWorldStep)(dWorldID, dReal stepsize);
void (*dWorldImpulseToForce)(dWorldID, dReal stepsize, dReal ix, dReal iy, dReal iz, dVector3 force);
void (*dWorldQuickStep)(dWorldID w, dReal stepsize);
void (*dWorldSetQuickStepNumIterations)(dWorldID, int num);
int (*dWorldGetQuickStepNumIterations)(dWorldID);
void (*dWorldSetQuickStepW)(dWorldID, dReal over_relaxation);
dReal (*dWorldGetQuickStepW)(dWorldID);
void (*dWorldSetContactMaxCorrectingVel)(dWorldID, dReal vel);
dReal (*dWorldGetContactMaxCorrectingVel)(dWorldID);
void (*dWorldSetContactSurfaceLayer)(dWorldID, dReal depth);
dReal (*dWorldGetContactSurfaceLayer)(dWorldID);
void (*dWorldStepFast1)(dWorldID, dReal stepsize, int maxiterations);
void (*dWorldSetAutoEnableDepthSF1)(dWorldID, int autoEnableDepth);
int (*dWorldGetAutoEnableDepthSF1)(dWorldID);
dReal (*dWorldGetAutoDisableLinearThreshold)(dWorldID);
void (*dWorldSetAutoDisableLinearThreshold)(dWorldID, dReal linear_threshold);
dReal (*dWorldGetAutoDisableAngularThreshold)(dWorldID);
void (*dWorldSetAutoDisableAngularThreshold)(dWorldID, dReal angular_threshold);
//dReal (*dWorldGetAutoDisableLinearAverageThreshold)(dWorldID);
//void (*dWorldSetAutoDisableLinearAverageThreshold)(dWorldID, dReal linear_average_threshold);
//dReal (*dWorldGetAutoDisableAngularAverageThreshold)(dWorldID);
//void (*dWorldSetAutoDisableAngularAverageThreshold)(dWorldID, dReal angular_average_threshold);
int (*dWorldGetAutoDisableAverageSamplesCount)(dWorldID);
void (*dWorldSetAutoDisableAverageSamplesCount)(dWorldID, uint average_samples_count );
int (*dWorldGetAutoDisableSteps)(dWorldID);
void (*dWorldSetAutoDisableSteps)(dWorldID, int steps);
dReal (*dWorldGetAutoDisableTime)(dWorldID);
void (*dWorldSetAutoDisableTime)(dWorldID, dReal time);
int (*dWorldGetAutoDisableFlag)(dWorldID);
void (*dWorldSetAutoDisableFlag)(dWorldID, int do_auto_disable);
dReal (*dBodyGetAutoDisableLinearThreshold)(dBodyID);
void (*dBodySetAutoDisableLinearThreshold)(dBodyID, dReal linear_average_threshold);
dReal (*dBodyGetAutoDisableAngularThreshold)(dBodyID);
void (*dBodySetAutoDisableAngularThreshold)(dBodyID, dReal angular_average_threshold);
int (*dBodyGetAutoDisableAverageSamplesCount)(dBodyID);
void (*dBodySetAutoDisableAverageSamplesCount)(dBodyID, uint average_samples_count);
int (*dBodyGetAutoDisableSteps)(dBodyID);
void (*dBodySetAutoDisableSteps)(dBodyID, int steps);
dReal (*dBodyGetAutoDisableTime)(dBodyID);
void (*dBodySetAutoDisableTime)(dBodyID, dReal time);
int (*dBodyGetAutoDisableFlag)(dBodyID);
void (*dBodySetAutoDisableFlag)(dBodyID, int do_auto_disable);
void (*dBodySetAutoDisableDefaults)(dBodyID);
dWorldID (*dBodyGetWorld)(dBodyID);
dBodyID (*dBodyCreate)(dWorldID);
void (*dBodyDestroy)(dBodyID);
void (*dBodySetData)(dBodyID, void *data);
void* (*dBodyGetData)(dBodyID);
void (*dBodySetPosition)(dBodyID, dReal x, dReal y, dReal z);
void (*dBodySetRotation)(dBodyID, dMatrix3 R);
void (*dBodySetQuaternion)(dBodyID, dQuaternion q);
void (*dBodySetLinearVel)(dBodyID, dReal x, dReal y, dReal z);
void (*dBodySetAngularVel)(dBodyID, dReal x, dReal y, dReal z);
dReal* (*dBodyGetPosition)(dBodyID);
void (*dBodyCopyPosition)(dBodyID b, dVector3 pos);
dReal* (*dBodyGetRotation)(dBodyID);
void (*dBodyCopyRotation)(dBodyID, dMatrix3 R);
dReal* (*dBodyGetQuaternion)(dBodyID);
void (*dBodyCopyQuaternion)(dBodyID b, dQuaternion quat);
dReal* (*dBodyGetLinearVel)(dBodyID);
dReal* (*dBodyGetAngularVel)(dBodyID);
void (*dBodySetMass)(dBodyID, dMass *mass);
void (*dBodyGetMass)(dBodyID, dMass *mass);
void (*dBodyAddForce)(dBodyID, dReal fx, dReal fy, dReal fz);
void (*dBodyAddTorque)(dBodyID, dReal fx, dReal fy, dReal fz);
void (*dBodyAddRelForce)(dBodyID, dReal fx, dReal fy, dReal fz);
void (*dBodyAddRelTorque)(dBodyID, dReal fx, dReal fy, dReal fz);
void (*dBodyAddForceAtPos)(dBodyID, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void (*dBodyAddForceAtRelPos)(dBodyID, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void (*dBodyAddRelForceAtPos)(dBodyID, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void (*dBodyAddRelForceAtRelPos)(dBodyID, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
dReal* (*dBodyGetForce)(dBodyID);
dReal* (*dBodyGetTorque)(dBodyID);
void (*dBodySetForce)(dBodyID b, dReal x, dReal y, dReal z);
void (*dBodySetTorque)(dBodyID b, dReal x, dReal y, dReal z);
void (*dBodyGetRelPointPos)(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void (*dBodyGetRelPointVel)(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void (*dBodyGetPointVel)(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void (*dBodyGetPosRelPoint)(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void (*dBodyVectorToWorld)(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void (*dBodyVectorFromWorld)(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void (*dBodySetFiniteRotationMode)(dBodyID, int mode);
void (*dBodySetFiniteRotationAxis)(dBodyID, dReal x, dReal y, dReal z);
int (*dBodyGetFiniteRotationMode)(dBodyID);
void (*dBodyGetFiniteRotationAxis)(dBodyID, dVector3 result);
int (*dBodyGetNumJoints)(dBodyID b);
dJointID (*dBodyGetJoint)(dBodyID, int index);
void (*dBodyEnable)(dBodyID);
void (*dBodyDisable)(dBodyID);
int (*dBodyIsEnabled)(dBodyID);
void (*dBodySetGravityMode)(dBodyID b, int mode);
int (*dBodyGetGravityMode)(dBodyID b);
dJointID (*dJointCreateBall)(dWorldID, dJointGroupID);
dJointID (*dJointCreateHinge)(dWorldID, dJointGroupID);
dJointID (*dJointCreateSlider)(dWorldID, dJointGroupID);
dJointID (*dJointCreateContact)(dWorldID, dJointGroupID, dContact *);
dJointID (*dJointCreateHinge2)(dWorldID, dJointGroupID);
dJointID (*dJointCreateUniversal)(dWorldID, dJointGroupID);
dJointID (*dJointCreatePR)(dWorldID, dJointGroupID);
dJointID (*dJointCreateFixed)(dWorldID, dJointGroupID);
dJointID (*dJointCreateNull)(dWorldID, dJointGroupID);
dJointID (*dJointCreateAMotor)(dWorldID, dJointGroupID);
dJointID (*dJointCreateLMotor)(dWorldID, dJointGroupID);
dJointID (*dJointCreatePlane2D)(dWorldID, dJointGroupID);
void (*dJointDestroy)(dJointID);
dJointGroupID (*dJointGroupCreate)(int max_size);
void (*dJointGroupDestroy)(dJointGroupID);
void (*dJointGroupEmpty)(dJointGroupID);
void (*dJointAttach)(dJointID, dBodyID body1, dBodyID body2);
void (*dJointSetData)(dJointID, void *data);
void* (*dJointGetData)(dJointID);
int (*dJointGetType)(dJointID);
dBodyID (*dJointGetBody)(dJointID, int index);
void (*dJointSetFeedback)(dJointID, dJointFeedback *);
dJointFeedback* (*dJointGetFeedback)(dJointID);
void (*dJointSetBallAnchor)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetBallAnchor2)(dJointID, dReal x, dReal y, dReal z);
//void (*dJointSetBallParam)(dJointID, int parameter, dReal value);
void (*dJointSetHingeAnchor)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetHingeAnchorDelta)(dJointID, dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
void (*dJointSetHingeAxis)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetHingeParam)(dJointID, int parameter, dReal value);
void (*dJointAddHingeTorque)(dJointID joint, dReal torque);
void (*dJointSetSliderAxis)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetSliderAxisDelta)(dJointID, dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
void (*dJointSetSliderParam)(dJointID, int parameter, dReal value);
void (*dJointAddSliderForce)(dJointID joint, dReal force);
void (*dJointSetHinge2Anchor)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetHinge2Axis1)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetHinge2Axis2)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetHinge2Param)(dJointID, int parameter, dReal value);
void (*dJointAddHinge2Torques)(dJointID joint, dReal torque1, dReal torque2);
void (*dJointSetUniversalAnchor)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetUniversalAxis1)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetUniversalAxis2)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetUniversalParam)(dJointID, int parameter, dReal value);
void (*dJointAddUniversalTorques)(dJointID joint, dReal torque1, dReal torque2);
void (*dJointSetPRAnchor)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetPRAxis1)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetPRAxis2)(dJointID, dReal x, dReal y, dReal z);
void (*dJointSetPRParam)(dJointID, int parameter, dReal value);
void (*dJointAddPRTorque)(dJointID j, dReal torque);
void (*dJointSetFixed)(dJointID);
//void (*dJointSetFixedParam)(dJointID, int parameter, dReal value);
void (*dJointSetAMotorNumAxes)(dJointID, int num);
void (*dJointSetAMotorAxis)(dJointID, int anum, int rel, dReal x, dReal y, dReal z);
void (*dJointSetAMotorAngle)(dJointID, int anum, dReal angle);
void (*dJointSetAMotorParam)(dJointID, int parameter, dReal value);
void (*dJointSetAMotorMode)(dJointID, int mode);
void (*dJointAddAMotorTorques)(dJointID, dReal torque1, dReal torque2, dReal torque3);
void (*dJointSetLMotorNumAxes)(dJointID, int num);
void (*dJointSetLMotorAxis)(dJointID, int anum, int rel, dReal x, dReal y, dReal z);
void (*dJointSetLMotorParam)(dJointID, int parameter, dReal value);
void (*dJointSetPlane2DXParam)(dJointID, int parameter, dReal value);
void (*dJointSetPlane2DYParam)(dJointID, int parameter, dReal value);
void (*dJointSetPlane2DAngleParam)(dJointID, int parameter, dReal value);
void (*dJointGetBallAnchor)(dJointID, dVector3 result);
void (*dJointGetBallAnchor2)(dJointID, dVector3 result);
//dReal (*dJointGetBallParam)(dJointID, int parameter);
void (*dJointGetHingeAnchor)(dJointID, dVector3 result);
void (*dJointGetHingeAnchor2)(dJointID, dVector3 result);
void (*dJointGetHingeAxis)(dJointID, dVector3 result);
dReal (*dJointGetHingeParam)(dJointID, int parameter);
dReal (*dJointGetHingeAngle)(dJointID);
dReal (*dJointGetHingeAngleRate)(dJointID);
dReal (*dJointGetSliderPosition)(dJointID);
dReal (*dJointGetSliderPositionRate)(dJointID);
void (*dJointGetSliderAxis)(dJointID, dVector3 result);
dReal (*dJointGetSliderParam)(dJointID, int parameter);
void (*dJointGetHinge2Anchor)(dJointID, dVector3 result);
void (*dJointGetHinge2Anchor2)(dJointID, dVector3 result);
void (*dJointGetHinge2Axis1)(dJointID, dVector3 result);
void (*dJointGetHinge2Axis2)(dJointID, dVector3 result);
dReal (*dJointGetHinge2Param)(dJointID, int parameter);
dReal (*dJointGetHinge2Angle1)(dJointID);
dReal (*dJointGetHinge2Angle1Rate)(dJointID);
dReal (*dJointGetHinge2Angle2Rate)(dJointID);
void (*dJointGetUniversalAnchor)(dJointID, dVector3 result);
void (*dJointGetUniversalAnchor2)(dJointID, dVector3 result);
void (*dJointGetUniversalAxis1)(dJointID, dVector3 result);
void (*dJointGetUniversalAxis2)(dJointID, dVector3 result);
dReal (*dJointGetUniversalParam)(dJointID, int parameter);
void (*dJointGetUniversalAngles)(dJointID, dReal *angle1, dReal *angle2);
dReal (*dJointGetUniversalAngle1)(dJointID);
dReal (*dJointGetUniversalAngle2)(dJointID);
dReal (*dJointGetUniversalAngle1Rate)(dJointID);
dReal (*dJointGetUniversalAngle2Rate)(dJointID);
void (*dJointGetPRAnchor)(dJointID, dVector3 result);
dReal (*dJointGetPRPosition)(dJointID);
dReal (*dJointGetPRPositionRate)(dJointID);
void (*dJointGetPRAxis1)(dJointID, dVector3 result);
void (*dJointGetPRAxis2)(dJointID, dVector3 result);
dReal (*dJointGetPRParam)(dJointID, int parameter);
int (*dJointGetAMotorNumAxes)(dJointID);
void (*dJointGetAMotorAxis)(dJointID, int anum, dVector3 result);
int (*dJointGetAMotorAxisRel)(dJointID, int anum);
dReal (*dJointGetAMotorAngle)(dJointID, int anum);
dReal (*dJointGetAMotorAngleRate)(dJointID, int anum);
dReal (*dJointGetAMotorParam)(dJointID, int parameter);
int (*dJointGetAMotorMode)(dJointID);
int (*dJointGetLMotorNumAxes)(dJointID);
void (*dJointGetLMotorAxis)(dJointID, int anum, dVector3 result);
dReal (*dJointGetLMotorParam)(dJointID, int parameter);
//dReal (*dJointGetFixedParam)(dJointID, int parameter);
dJointID (*dConnectingJoint)(dBodyID, dBodyID);
int (*dConnectingJointList)(dBodyID, dBodyID, dJointID*);
int (*dAreConnected)(dBodyID, dBodyID);
int (*dAreConnectedExcluding)(dBodyID body1, dBodyID body2, int joint_type);
}
else
{
extern(C):
dWorldID dWorldCreate();
void dWorldDestroy(dWorldID world);
void dWorldSetGravity(dWorldID, dReal x, dReal y, dReal z);
void dWorldGetGravity(dWorldID, dVector3 gravity);
void dWorldSetERP(dWorldID, dReal erp);
dReal dWorldGetERP(dWorldID);
void dWorldSetCFM(dWorldID, dReal cfm);
dReal dWorldGetCFM(dWorldID);
void dWorldStep(dWorldID, dReal stepsize);
void dWorldImpulseToForce(dWorldID, dReal stepsize, dReal ix, dReal iy, dReal iz, dVector3 force);
void dWorldQuickStep(dWorldID w, dReal stepsize);
void dWorldSetQuickStepNumIterations(dWorldID, int num);
int dWorldGetQuickStepNumIterations(dWorldID);
void dWorldSetQuickStepW(dWorldID, dReal over_relaxation);
dReal dWorldGetQuickStepW(dWorldID);
void dWorldSetContactMaxCorrectingVel(dWorldID, dReal vel);
dReal dWorldGetContactMaxCorrectingVel(dWorldID);
void dWorldSetContactSurfaceLayer(dWorldID, dReal depth);
dReal dWorldGetContactSurfaceLayer(dWorldID);
void dWorldStepFast1(dWorldID, dReal stepsize, int maxiterations);
void dWorldSetAutoEnableDepthSF1(dWorldID, int autoEnableDepth);
int dWorldGetAutoEnableDepthSF1(dWorldID);
dReal dWorldGetAutoDisableLinearThreshold(dWorldID);
void dWorldSetAutoDisableLinearThreshold(dWorldID, dReal linear_threshold);
dReal dWorldGetAutoDisableAngularThreshold(dWorldID);
void dWorldSetAutoDisableAngularThreshold(dWorldID, dReal angular_threshold);
//dReal dWorldGetAutoDisableLinearAverageThreshold(dWorldID);
//void dWorldSetAutoDisableLinearAverageThreshold(dWorldID, dReal linear_average_threshold);
//dReal dWorldGetAutoDisableAngularAverageThreshold(dWorldID);
//void dWorldSetAutoDisableAngularAverageThreshold(dWorldID, dReal angular_average_threshold);
int dWorldGetAutoDisableAverageSamplesCount(dWorldID);
void dWorldSetAutoDisableAverageSamplesCount(dWorldID, uint average_samples_count );
int dWorldGetAutoDisableSteps(dWorldID);
void dWorldSetAutoDisableSteps(dWorldID, int steps);
dReal dWorldGetAutoDisableTime(dWorldID);
void dWorldSetAutoDisableTime(dWorldID, dReal time);
int dWorldGetAutoDisableFlag(dWorldID);
void dWorldSetAutoDisableFlag(dWorldID, int do_auto_disable);
dReal dBodyGetAutoDisableLinearThreshold(dBodyID);
void dBodySetAutoDisableLinearThreshold(dBodyID, dReal linear_average_threshold);
dReal dBodyGetAutoDisableAngularThreshold(dBodyID);
void dBodySetAutoDisableAngularThreshold(dBodyID, dReal angular_average_threshold);
int dBodyGetAutoDisableAverageSamplesCount(dBodyID);
void dBodySetAutoDisableAverageSamplesCount(dBodyID, uint average_samples_count);
int dBodyGetAutoDisableSteps(dBodyID);
void dBodySetAutoDisableSteps(dBodyID, int steps);
dReal dBodyGetAutoDisableTime(dBodyID);
void dBodySetAutoDisableTime(dBodyID, dReal time);
int dBodyGetAutoDisableFlag(dBodyID);
void dBodySetAutoDisableFlag(dBodyID, int do_auto_disable);
void dBodySetAutoDisableDefaults(dBodyID);
dWorldID dBodyGetWorld(dBodyID);
dBodyID dBodyCreate(dWorldID);
void dBodyDestroy(dBodyID);
void dBodySetData(dBodyID, void *data);
void* dBodyGetData(dBodyID);
void dBodySetPosition(dBodyID, dReal x, dReal y, dReal z);
void dBodySetRotation(dBodyID, dMatrix3 R);
void dBodySetQuaternion(dBodyID, dQuaternion q);
void dBodySetLinearVel(dBodyID, dReal x, dReal y, dReal z);
void dBodySetAngularVel(dBodyID, dReal x, dReal y, dReal z);
dReal* dBodyGetPosition(dBodyID);
void dBodyCopyPosition(dBodyID b, dVector3 pos);
dReal* dBodyGetRotation(dBodyID);
void dBodyCopyRotation(dBodyID, dMatrix3 R);
dReal* dBodyGetQuaternion(dBodyID);
void dBodyCopyQuaternion(dBodyID b, dQuaternion quat);
dReal* dBodyGetLinearVel(dBodyID);
dReal* dBodyGetAngularVel(dBodyID);
void dBodySetMass(dBodyID, dMass *mass);
void dBodyGetMass(dBodyID, dMass *mass);
void dBodyAddForce(dBodyID, dReal fx, dReal fy, dReal fz);
void dBodyAddTorque(dBodyID, dReal fx, dReal fy, dReal fz);
void dBodyAddRelForce(dBodyID, dReal fx, dReal fy, dReal fz);
void dBodyAddRelTorque(dBodyID, dReal fx, dReal fy, dReal fz);
void dBodyAddForceAtPos(dBodyID, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void dBodyAddForceAtRelPos(dBodyID, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void dBodyAddRelForceAtPos(dBodyID, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void dBodyAddRelForceAtRelPos(dBodyID, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
dReal* dBodyGetForce(dBodyID);
dReal* dBodyGetTorque(dBodyID);
void dBodySetForce(dBodyID b, dReal x, dReal y, dReal z);
void dBodySetTorque(dBodyID b, dReal x, dReal y, dReal z);
void dBodyGetRelPointPos(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void dBodyGetRelPointVel(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void dBodyGetPointVel(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void dBodyGetPosRelPoint(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void dBodyVectorToWorld(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void dBodyVectorFromWorld(dBodyID, dReal px, dReal py, dReal pz, dVector3 result);
void dBodySetFiniteRotationMode(dBodyID, int mode);
void dBodySetFiniteRotationAxis(dBodyID, dReal x, dReal y, dReal z);
int dBodyGetFiniteRotationMode(dBodyID);
void dBodyGetFiniteRotationAxis(dBodyID, dVector3 result);
int dBodyGetNumJoints(dBodyID b);
dJointID dBodyGetJoint(dBodyID, int index);
void dBodyEnable(dBodyID);
void dBodyDisable(dBodyID);
int dBodyIsEnabled(dBodyID);
void dBodySetGravityMode(dBodyID b, int mode);
int dBodyGetGravityMode(dBodyID b);
dJointID dJointCreateBall(dWorldID, dJointGroupID);
dJointID dJointCreateHinge(dWorldID, dJointGroupID);
dJointID dJointCreateSlider(dWorldID, dJointGroupID);
dJointID dJointCreateContact(dWorldID, dJointGroupID, dContact *);
dJointID dJointCreateHinge2(dWorldID, dJointGroupID);
dJointID dJointCreateUniversal(dWorldID, dJointGroupID);
dJointID dJointCreatePR(dWorldID, dJointGroupID);
dJointID dJointCreateFixed(dWorldID, dJointGroupID);
dJointID dJointCreateNull(dWorldID, dJointGroupID);
dJointID dJointCreateAMotor(dWorldID, dJointGroupID);
dJointID dJointCreateLMotor(dWorldID, dJointGroupID);
dJointID dJointCreatePlane2D(dWorldID, dJointGroupID);
void dJointDestroy(dJointID);
dJointGroupID dJointGroupCreate(int max_size);
void dJointGroupDestroy(dJointGroupID);
void dJointGroupEmpty(dJointGroupID);
void dJointAttach(dJointID, dBodyID body1, dBodyID body2);
void dJointSetData(dJointID, void *data);
void* dJointGetData(dJointID);
int dJointGetType(dJointID);
dBodyID dJointGetBody(dJointID, int index);
void dJointSetFeedback(dJointID, dJointFeedback *);
dJointFeedback* dJointGetFeedback(dJointID);
void dJointSetBallAnchor(dJointID, dReal x, dReal y, dReal z);
void dJointSetBallAnchor2(dJointID, dReal x, dReal y, dReal z);
//void dJointSetBallParam(dJointID, int parameter, dReal value);
void dJointSetHingeAnchor(dJointID, dReal x, dReal y, dReal z);
void dJointSetHingeAnchorDelta(dJointID, dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
void dJointSetHingeAxis(dJointID, dReal x, dReal y, dReal z);
void dJointSetHingeParam(dJointID, int parameter, dReal value);
void dJointAddHingeTorque(dJointID joint, dReal torque);
void dJointSetSliderAxis(dJointID, dReal x, dReal y, dReal z);
void dJointSetSliderAxisDelta(dJointID, dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
void dJointSetSliderParam(dJointID, int parameter, dReal value);
void dJointAddSliderForce(dJointID joint, dReal force);
void dJointSetHinge2Anchor(dJointID, dReal x, dReal y, dReal z);
void dJointSetHinge2Axis1(dJointID, dReal x, dReal y, dReal z);
void dJointSetHinge2Axis2(dJointID, dReal x, dReal y, dReal z);
void dJointSetHinge2Param(dJointID, int parameter, dReal value);
void dJointAddHinge2Torques(dJointID joint, dReal torque1, dReal torque2);
void dJointSetUniversalAnchor(dJointID, dReal x, dReal y, dReal z);
void dJointSetUniversalAxis1(dJointID, dReal x, dReal y, dReal z);
void dJointSetUniversalAxis2(dJointID, dReal x, dReal y, dReal z);
void dJointSetUniversalParam(dJointID, int parameter, dReal value);
void dJointAddUniversalTorques(dJointID joint, dReal torque1, dReal torque2);
void dJointSetPRAnchor(dJointID, dReal x, dReal y, dReal z);
void dJointSetPRAxis1(dJointID, dReal x, dReal y, dReal z);
void dJointSetPRAxis2(dJointID, dReal x, dReal y, dReal z);
void dJointSetPRParam(dJointID, int parameter, dReal value);
void dJointAddPRTorque(dJointID j, dReal torque);
void dJointSetFixed(dJointID);
//void dJointSetFixedParam(dJointID, int parameter, dReal value);
void dJointSetAMotorNumAxes(dJointID, int num);
void dJointSetAMotorAxis(dJointID, int anum, int rel, dReal x, dReal y, dReal z);
void dJointSetAMotorAngle(dJointID, int anum, dReal angle);
void dJointSetAMotorParam(dJointID, int parameter, dReal value);
void dJointSetAMotorMode(dJointID, int mode);
void dJointAddAMotorTorques(dJointID, dReal torque1, dReal torque2, dReal torque3);
void dJointSetLMotorNumAxes(dJointID, int num);
void dJointSetLMotorAxis(dJointID, int anum, int rel, dReal x, dReal y, dReal z);
void dJointSetLMotorParam(dJointID, int parameter, dReal value);
void dJointSetPlane2DXParam(dJointID, int parameter, dReal value);
void dJointSetPlane2DYParam(dJointID, int parameter, dReal value);
void dJointSetPlane2DAngleParam(dJointID, int parameter, dReal value);
void dJointGetBallAnchor(dJointID, dVector3 result);
void dJointGetBallAnchor2(dJointID, dVector3 result);
//dReal dJointGetBallParam(dJointID, int parameter);
void dJointGetHingeAnchor(dJointID, dVector3 result);
void dJointGetHingeAnchor2(dJointID, dVector3 result);
void dJointGetHingeAxis(dJointID, dVector3 result);
dReal dJointGetHingeParam(dJointID, int parameter);
dReal dJointGetHingeAngle(dJointID);
dReal dJointGetHingeAngleRate(dJointID);
dReal dJointGetSliderPosition(dJointID);
dReal dJointGetSliderPositionRate(dJointID);
void dJointGetSliderAxis(dJointID, dVector3 result);
dReal dJointGetSliderParam(dJointID, int parameter);
void dJointGetHinge2Anchor(dJointID, dVector3 result);
void dJointGetHinge2Anchor2(dJointID, dVector3 result);
void dJointGetHinge2Axis1(dJointID, dVector3 result);
void dJointGetHinge2Axis2(dJointID, dVector3 result);
dReal dJointGetHinge2Param(dJointID, int parameter);
dReal dJointGetHinge2Angle1(dJointID);
dReal dJointGetHinge2Angle1Rate(dJointID);
dReal dJointGetHinge2Angle2Rate(dJointID);
void dJointGetUniversalAnchor(dJointID, dVector3 result);
void dJointGetUniversalAnchor2(dJointID, dVector3 result);
void dJointGetUniversalAxis1(dJointID, dVector3 result);
void dJointGetUniversalAxis2(dJointID, dVector3 result);
dReal dJointGetUniversalParam(dJointID, int parameter);
void dJointGetUniversalAngles(dJointID, dReal *angle1, dReal *angle2);
dReal dJointGetUniversalAngle1(dJointID);
dReal dJointGetUniversalAngle2(dJointID);
dReal dJointGetUniversalAngle1Rate(dJointID);
dReal dJointGetUniversalAngle2Rate(dJointID);
void dJointGetPRAnchor(dJointID, dVector3 result);
dReal dJointGetPRPosition(dJointID);
dReal dJointGetPRPositionRate(dJointID);
void dJointGetPRAxis1(dJointID, dVector3 result);
void dJointGetPRAxis2(dJointID, dVector3 result);
dReal dJointGetPRParam(dJointID, int parameter);
int dJointGetAMotorNumAxes(dJointID);
void dJointGetAMotorAxis(dJointID, int anum, dVector3 result);
int dJointGetAMotorAxisRel(dJointID, int anum);
dReal dJointGetAMotorAngle(dJointID, int anum);
dReal dJointGetAMotorAngleRate(dJointID, int anum);
dReal dJointGetAMotorParam(dJointID, int parameter);
int dJointGetAMotorMode(dJointID);
int dJointGetLMotorNumAxes(dJointID);
void dJointGetLMotorAxis(dJointID, int anum, dVector3 result);
dReal dJointGetLMotorParam(dJointID, int parameter);
//dReal dJointGetFixedParam(dJointID, int parameter);
dJointID dConnectingJoint(dBodyID, dBodyID);
int dConnectingJointList(dBodyID, dBodyID, dJointID*);
int dAreConnected(dBodyID, dBodyID);
int dAreConnectedExcluding(dBodyID body1, dBodyID body2, int joint_type);
}
