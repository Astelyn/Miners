// This file is a hand mangled version of GLU.h
// See the copyright in src/lib/gl/gl.d (BSD/MIT like).
module lib.gl.glu;

import lib.gl.types;


const GLU_VERSION = 100800;
const GLU_EXTENSIONS = 100801;
const GLU_INVALID_ENUM = 100900;
const GLU_INVALID_VALUE = 100901;
const GLU_OUT_OF_MEMORY = 100902;
const GLU_INVALID_OPERATION = 100904;
const GLU_OUTLINE_POLYGON = 100240;
const GLU_OUTLINE_PATCH = 100241;
const GLU_NURBS_ERROR = 100103;
const GLU_ERROR = 100103;
const GLU_NURBS_BEGIN = 100164;
const GLU_NURBS_BEGIN_EXT = 100164;
const GLU_NURBS_VERTEX = 100165;
const GLU_NURBS_VERTEX_EXT = 100165;
const GLU_NURBS_NORMAL = 100166;
const GLU_NURBS_NORMAL_EXT = 100166;
const GLU_NURBS_COLOR = 100167;
const GLU_NURBS_COLOR_EXT = 100167;
const GLU_NURBS_TEXTURE_COORD = 100168;
const GLU_NURBS_TEX_COORD_EXT = 100168;
const GLU_NURBS_END = 100169;
const GLU_NURBS_END_EXT = 100169;
const GLU_NURBS_BEGIN_DATA = 100170;
const GLU_NURBS_BEGIN_DATA_EXT = 100170;
const GLU_NURBS_VERTEX_DATA = 100171;
const GLU_NURBS_VERTEX_DATA_EXT = 100171;
const GLU_NURBS_NORMAL_DATA = 100172;
const GLU_NURBS_NORMAL_DATA_EXT = 100172;
const GLU_NURBS_COLOR_DATA = 100173;
const GLU_NURBS_COLOR_DATA_EXT = 100173;
const GLU_NURBS_TEXTURE_COORD_DATA = 100174;
const GLU_NURBS_TEX_COORD_DATA_EXT = 100174;
const GLU_NURBS_END_DATA = 100175;
const GLU_NURBS_END_DATA_EXT = 100175;
const GLU_NURBS_ERROR1 = 100251;
const GLU_NURBS_ERROR2 = 100252;
const GLU_NURBS_ERROR3 = 100253;
const GLU_NURBS_ERROR4 = 100254;
const GLU_NURBS_ERROR5 = 100255;
const GLU_NURBS_ERROR6 = 100256;
const GLU_NURBS_ERROR7 = 100257;
const GLU_NURBS_ERROR8 = 100258;
const GLU_NURBS_ERROR9 = 100259;
const GLU_NURBS_ERROR10 = 100260;
const GLU_NURBS_ERROR11 = 100261;
const GLU_NURBS_ERROR12 = 100262;
const GLU_NURBS_ERROR13 = 100263;
const GLU_NURBS_ERROR14 = 100264;
const GLU_NURBS_ERROR15 = 100265;
const GLU_NURBS_ERROR16 = 100266;
const GLU_NURBS_ERROR17 = 100267;
const GLU_NURBS_ERROR18 = 100268;
const GLU_NURBS_ERROR19 = 100269;
const GLU_NURBS_ERROR20 = 100270;
const GLU_NURBS_ERROR21 = 100271;
const GLU_NURBS_ERROR22 = 100272;
const GLU_NURBS_ERROR23 = 100273;
const GLU_NURBS_ERROR24 = 100274;
const GLU_NURBS_ERROR25 = 100275;
const GLU_NURBS_ERROR26 = 100276;
const GLU_NURBS_ERROR27 = 100277;
const GLU_NURBS_ERROR28 = 100278;
const GLU_NURBS_ERROR29 = 100279;
const GLU_NURBS_ERROR30 = 100280;
const GLU_NURBS_ERROR31 = 100281;
const GLU_NURBS_ERROR32 = 100282;
const GLU_NURBS_ERROR33 = 100283;
const GLU_NURBS_ERROR34 = 100284;
const GLU_NURBS_ERROR35 = 100285;
const GLU_NURBS_ERROR36 = 100286;
const GLU_NURBS_ERROR37 = 100287;
const GLU_AUTO_LOAD_MATRIX = 100200;
const GLU_CULLING = 100201;
const GLU_SAMPLING_TOLERANCE = 100203;
const GLU_DISPLAY_MODE = 100204;
const GLU_PARAMETRIC_TOLERANCE = 100202;
const GLU_SAMPLING_METHOD = 100205;
const GLU_U_STEP = 100206;
const GLU_V_STEP = 100207;
const GLU_NURBS_MODE = 100160;
const GLU_NURBS_MODE_EXT = 100160;
const GLU_NURBS_TESSELLATOR = 100161;
const GLU_NURBS_TESSELLATOR_EXT = 100161;
const GLU_NURBS_RENDERER = 100162;
const GLU_NURBS_RENDERER_EXT = 100162;
const GLU_OBJECT_PARAMETRIC_ERROR = 100208;
const GLU_OBJECT_PARAMETRIC_ERROR_EXT = 100208;
const GLU_OBJECT_PATH_LENGTH = 100209;
const GLU_OBJECT_PATH_LENGTH_EXT = 100209;
const GLU_PATH_LENGTH = 100215;
const GLU_PARAMETRIC_ERROR = 100216;
const GLU_DOMAIN_DISTANCE = 100217;
const GLU_MAP1_TRIM_2 = 100210;
const GLU_MAP2_TRIM_3 = 100211;
const GLU_POINT = 100010;
const GLU_LINE = 100011;
const GLU_FILL = 100012;
const GLU_SILHOUETTE = 100013;
const GLU_SMOOTH = 100000;
const GLU_FLAT = 100001;
const GLU_NONE = 100002;
const GLU_OUTSITE = 100020;
const GLU_INSIDE = 100021;
const GLU_TESS_BEGIN = 100100;
const GLU_BEGIN = 100100;
const GLU_TESS_VERTEX = 100101;
const GLU_VERTEX = 100101;
const GLU_TESS_END = 100102;
const GLU_END = 100102;
const GLU_TESS_ERROR = 100103;
const GLU_TESS_EDGE_FLAG = 100104;
const GLU_EDGE_FLAG = 100104;
const GLU_TESS_COMBINE = 100105;
const GLU_TESS_BEGIN_DATA = 100106;
const GLU_TESS_VERTEX_DATA = 100107;
const GLU_TESS_END_DATA = 100108;
const GLU_TESS_ERROR_DATA = 100109;
const GLU_TESS_EDGE_FLAG_DATA = 100110;
const GLU_TESS_COMBINE_DATA = 100111;
const GLU_CW = 100120;
const GLU_CCW = 100121;
const GLU_INTERIOR = 100122;
const GLU_EXTERIOR = 100123;
const GLU_UNKNOWN = 100124;
const GLU_TESS_WINDING_RULE = 100140;
const GLU_TESS_BOUNDARY_ONLY = 100141;
const GLU_TESS_TOLERANCE = 100142;
const GLU_TESS_ERROR1 = 100151;
const GLU_TESS_ERROR2 = 100152;
const GLU_TESS_ERROR3 = 100153;
const GLU_TESS_ERROR4 = 100154;
const GLU_TESS_ERROR5 = 100155;
const GLU_TESS_ERROR6 = 100156;
const GLU_TESS_ERROR7 = 100157;
const GLU_TESS_ERROR8 = 100158;
const GLU_TESS_MISSING_BEGIN_POLYGON = 100151;
const GLU_TESS_MISSING_BEGIN_COUNTER = 100152;
const GLU_TESS_MISSING_END_POLYGON = 100153;
const GLU_TESS_MISSING_END_COUNTER = 100154;
const GLU_TESS_COORD_TOO_LARGE = 100155;
const GLU_TESS_NEED_COMBINE_CALLBACK = 100156;
const GLU_TESS_WINDING_ODD = 100130;
const GLU_TESS_WINDING_NONZERO = 100131;
const GLU_TESS_WINDING_POSITIVE = 100132;
const GLU_TESS_WINDING_NEGATIVE = 100133;
const GLU_TESS_WINDING_ABS_GEQ_TWO = 100134;
const GLdouble GLU_TESS_MAX_COORD = 1.0e150;

struct GLUnurbs {}
struct GLUquadric {}
struct GLUtesselator {}

alias GLUnurbs GLUnurbsObj;
alias GLUquadric GLUquadricObj;
alias GLUtesselator GLUtesselatorObj;
alias GLUtesselator GLUtriangulatorObj;

extern(System) alias void function() _GLUfuncptr;

extern(System):

GLint function(GLenum,GLint,GLsizei,GLenum,GLenum,GLint,GLint,GLint,void*) gluBuild1DMipmapLevels;
GLint function(GLenum,GLint,GLsizei,GLenum,GLenum,void*) gluBuild1DMipmaps;
GLint function(GLenum,GLint,GLsizei,GLsizei,GLenum,GLenum,GLint,GLint,GLint,void*) gluBuild2DMipmapLevels;
GLint function(GLenum,GLint,GLsizei,GLsizei,GLenum,GLenum,void*) gluBuild2DMipmaps;
GLint function(GLenum,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,GLint,GLint,GLint,void*) gluBuild3DMipmapLevels;
GLint function(GLenum,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,void*) gluBuild3DMipmaps;
GLboolean function(GLubyte*,GLubyte*) gluCheckExtension;
GLubyte* function(GLenum) gluErrorString;
GLubyte* function(GLenum) gluGetString;
void function(GLUquadric*,GLdouble,GLdouble,GLdouble,GLint,GLint) gluCylinder;
void function(GLUquadric*,GLdouble,GLdouble,GLint,GLint) gluDisk;
void function(GLUquadric*,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble) gluPartialDisk;
void function(GLUquadric*,GLdouble,GLint,GLint) gluSphere;
void function(GLUnurbs*) gluBeginCurve;
void function(GLUtesselator*) gluBeginPolygon;
void function(GLUnurbs*) gluBeginSurface;
void function(GLUnurbs*) gluBeginTrim;
void function(GLUnurbs*) gluEndCurve;
void function(GLUtesselator*) gluEndPolygon;
void function(GLUnurbs*) gluEndSurface;
void function(GLUnurbs*) gluEndTrim;
void function(GLUnurbs*) gluDeleteNurbsRenderer;
void function(GLUquadric*) gluDeleteQuadric;
void function(GLUtesselator*) gluDeleteTess;
void function(GLUnurbs*,GLenum,GLfloat*) gluGetNurbsProperty;
void function(GLUtesselator*,GLenum,GLdouble*) gluGetTessProperty;
void function(GLUnurbs*,GLfloat*,GLfloat*,GLint*) gluLoadSamplingMatrices;
GLUnurbs* function() gluNewNurbsRenderer;
GLUquadric* function() gluNewQuadric;
GLUtesselator* function() gluNewTess;
void function(GLUtesselator*,GLenum) gluNextContour;
void function(GLUnurbs*,GLenum,_GLUfuncptr) gluNurbsCallback;
void function(GLUnurbs*,GLvoid*) gluNurbsCallbackData;
void function(GLUnurbs*,GLvoid*) gluNurbsCallbackDataEXT;
void function(GLUnurbs*,GLint,GLfloat*,GLint,GLfloat*,GLint,GLenum) gluNurbsCurve;
void function(GLUnurbs*,GLenum,GLfloat) gluNurbsProperty;
void function(GLUnurbs*,GLint,GLfloat*,GLint,GLfloat*,GLint,GLint,GLfloat*,GLint,GLint,GLenum) gluNurbsSurface;
void function(GLUnurbs*,GLint,GLfloat*,GLint,GLenum) gluPwlCurve;
void function(GLUquadric*,GLenum,_GLUfuncptr) gluQuadricCallback;
void function(GLUquadric*,GLenum) gluQuadricDrawStyle;
void function(GLUquadric*,GLenum) gluQuadricNormals;
void function(GLUquadric*,GLenum) gluQuadricOrientation;
void function(GLUquadric*,GLboolean) gluQuadricTexture;
void function(GLUtesselator*) gluTessBeginContour;
void function(GLUtesselator*,GLvoid*) gluTessBeginPolygon;
void function(GLUtesselator*,GLenum,_GLUfuncptr) gluTessCallback;
void function(GLUtesselator*) gluTessEndContour;
void function(GLUtesselator*) gluTessEndPolygon;
void function(GLUtesselator*,GLdouble,GLdouble,GLdouble) gluTessNormal;
void function(GLUtesselator*,GLenum,GLdouble) gluTessProperty;
void function(GLUtesselator*,GLdouble*,GLvoid*) gluTessVertex;
void function(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble) gluLookAt;
void function(GLdouble,GLdouble,GLdouble,GLdouble) gluOrtho2D;
void function(GLdouble,GLdouble,GLdouble,GLdouble) gluPerspective;
void function(GLdouble,GLdouble,GLdouble,GLdouble,GLint*) gluPickMatrix;
GLint function(GLdouble,GLdouble,GLdouble,GLdouble*,GLdouble*,GLint*,GLdouble*,GLdouble*,GLdouble*) gluProject;
GLint function(GLenum,GLsizei,GLsizei,GLenum,void*,GLsizei,GLsizei,GLenum,GLvoid*) gluScaleImage;
GLint function(GLdouble,GLdouble,GLdouble,GLdouble*,GLdouble*,GLint*,GLdouble*,GLdouble*,GLdouble*) gluUnProject;
GLint function(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble*,GLdouble*,GLint*,GLdouble,GLdouble,GLdouble*,GLdouble*,GLdouble*,GLdouble*) gluUnProject4;
