module lib.al.al11;

import lib.al.types;


const AL_NONE = 0;
const AL_FALSE = 0;
const AL_TRUE = 1;
const AL_SOURCE_RELATIVE = 0x202;
const AL_CONE_INNER_ANGLE = 0x1001;
const AL_CONE_OUTER_ANGLE = 0x1002;
const AL_PITCH = 0x1003;
const AL_POSITION = 0x1004;
const AL_DIRECTION = 0x1005;
const AL_VELOCITY = 0x1006;
const AL_LOOPING = 0x1007;
const AL_BUFFER = 0x1009;
const AL_GAIN = 0x100A;
const AL_MIN_GAIN = 0x100D;
const AL_MAX_GAIN = 0x100E;
const AL_ORIENTATION = 0x100F;
const AL_SOURCE_STATE = 0x1010;
const AL_INITIAL = 0x1011;
const AL_PLAYING = 0x1012;
const AL_PAUSED = 0x1013;
const AL_STOPPED = 0x1014;
const AL_BUFFERS_QUEUED = 0x1015;
const AL_BUFFERS_PROCESSED = 0x1016;
const AL_SEC_OFFSET = 0x1024;
const AL_SAMPLE_OFFSET = 0x1025;
const AL_BYTE_OFFSET = 0x1026;
const AL_SOURCE_TYPE = 0x1027;
const AL_STATIC = 0x1028;
const AL_STREAMING = 0x1029;
const AL_UNDETERMINED = 0x1030;
const AL_FORMAT_MONO8 = 0x1100;
const AL_FORMAT_MONO16 = 0x1101;
const AL_FORMAT_STEREO8 = 0x1102;
const AL_FORMAT_STEREO16 = 0x1103;
const AL_REFERENCE_DISTANCE = 0x1020;
const AL_ROLLOFF_FACTOR = 0x1021;
const AL_CONE_OUTER_GAIN = 0x1022;
const AL_MAX_DISTANCE = 0x1023;
const AL_FREQUENCY = 0x2001;
const AL_BITS = 0x2002;
const AL_CHANNELS = 0x2003;
const AL_SIZE = 0x2004;
const AL_UNUSED = 0x2010;
const AL_PENDING = 0x2011;
const AL_PROCESSED = 0x2012;
const AL_NO_ERROR = AL_FALSE;
const AL_INVALID_NAME = 0xA001;
const AL_INVALID_ENUM = 0xA002;
const AL_INVALID_VALUE = 0xA003;
const AL_INVALID_OPERATION = 0xA004;
const AL_OUT_OF_MEMORY = 0xA005;
const AL_VENDOR = 0xB001;
const AL_VERSION = 0xB002;
const AL_RENDERER = 0xB003;
const AL_EXTENSIONS = 0xB004;
const AL_DOPPLER_FACTOR = 0xC000;
const AL_DOPPLER_VELOCITY = 0xC001;
const AL_SPEED_OF_SOUND = 0xC003;
const AL_DISTANCE_MODEL = 0xD000;
const AL_INVERSE_DISTANCE = 0xD001;
const AL_INVERSE_DISTANCE_CLAMPED = 0xD002;
const AL_LINEAR_DISTANCE = 0xD003;
const AL_LINEAR_DISTANCE_CLAMPED = 0xD004;
const AL_EXPONENT_DISTANCE = 0xD005;
const AL_EXPONENT_DISTANCE_CLAMPED = 0xD006;

extern(C):

void function(ALenum capability) alEnable;
void function(ALenum capability) alDisable;
ALboolean function(ALenum capability) alIsEnabled;
ALchar* function(ALenum param) alGetString;
void function(ALenum param, ALboolean* data) alGetBooleanv;
void function(ALenum param, ALint* data) alGetIntegerv;
void function(ALenum param, ALfloat* data) alGetFloatv;
void function(ALenum param, ALdouble* data) alGetDoublev;
ALboolean function(ALenum param) alGetBoolean;
ALint function(ALenum param) alGetInteger;
ALfloat function(ALenum param) alGetFloat;
ALdouble function(ALenum param) alGetDouble;
ALenum function() alGetError;
ALboolean function(ALchar* extname) alIsExtensionPresent;
void* function(ALchar* fname) alGetProcAddress;
ALenum function(ALchar* ename) alGetEnumValue;
void function(ALenum param, ALfloat value) alListenerf;
void function(ALenum param, ALfloat value1, ALfloat value2, ALfloat value3) alListener3f;
void function(ALenum param, ALfloat* values) alListenerfv;
void function(ALenum param, ALint value) alListeneri;
void function(ALenum param, ALint value1, ALint value2, ALint value3) alListener3i;
void function(ALenum param, ALint* values) alListeneriv;
void function(ALenum param, ALfloat* value) alGetListenerf;
void function(ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3) alGetListener3f;
void function(ALenum param, ALfloat* values) alGetListenerfv;
void function(ALenum param, ALint* value) alGetListeneri;
void function(ALenum param, ALint *value1, ALint *value2, ALint *value3) alGetListener3i;
void function(ALenum param, ALint* values) alGetListeneriv;
void function(ALsizei n, ALuint* sources) alGenSources;
void function(ALsizei n, ALuint* sources) alDeleteSources;
ALboolean function(ALuint sid) alIsSource;
void function(ALuint sid, ALenum param, ALfloat value) alSourcef;
void function(ALuint sid, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3) alSource3f;
void function(ALuint sid, ALenum param, ALfloat* values) alSourcefv;
void function(ALuint sid, ALenum param, ALint value) alSourcei;
//void function(ALuint sid, ALenum param, ALint value1, ALint value2, ALint value3) alSource3i;
//void function(ALuint sid, ALenum param, ALint* values) alSourceiv;
void function(ALuint sid, ALenum param, ALfloat* value) alGetSourcef;
void function( ALuint sid, ALenum param, ALfloat* value1, ALfloat* value2, ALfloat* value3) alGetSource3f;
void function(ALuint sid, ALenum param, ALfloat* values) alGetSourcefv;
void function(ALuint sid,  ALenum param, ALint* value) alGetSourcei;
//void function( ALuint sid, ALenum param, ALint* value1, ALint* value2, ALint* value3) alGetSource3i;
void function(ALuint sid,  ALenum param, ALint* values) alGetSourceiv;
void function(ALsizei ns, ALuint *sids) alSourcePlayv;
void function(ALsizei ns, ALuint *sids) alSourceStopv;
void function(ALsizei ns, ALuint *sids) alSourceRewindv;
void function(ALsizei ns, ALuint *sids) alSourcePausev;
void function(ALuint sid) alSourcePlay;
void function(ALuint sid) alSourceStop;
void function(ALuint sid) alSourceRewind;
void function(ALuint sid) alSourcePause;
void function(ALuint sid, ALsizei numEntries, ALuint *bids) alSourceQueueBuffers;
void function(ALuint sid, ALsizei numEntries, ALuint *bids) alSourceUnqueueBuffers;
void function(ALsizei n, ALuint* buffers) alGenBuffers;
void function(ALsizei n, ALuint* buffers) alDeleteBuffers;
ALboolean function(ALuint bid) alIsBuffer;
void function(ALuint bid, ALenum format, ALvoid* data, ALsizei size, ALsizei freq) alBufferData;
void function(ALuint bid, ALenum param, ALfloat value) alBufferf;
void function(ALuint bid, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3) alBuffer3f;
void function(ALuint bid, ALenum param, ALfloat* values) alBufferfv;
void function(ALuint bid, ALenum param, ALint value) alBufferi;
void function(ALuint bid, ALenum param, ALint value1, ALint value2, ALint value3) alBuffer3i;
void function(ALuint bid, ALenum param, ALint* values) alBufferiv;
void function(ALuint bid, ALenum param, ALfloat* value) alGetBufferf;
void function(ALuint bid, ALenum param, ALfloat* value1, ALfloat* value2, ALfloat* value3) alGetBuffer3f;
void function(ALuint bid, ALenum param, ALfloat* values) alGetBufferfv;
void function(ALuint bid, ALenum param, ALint* value) alGetBufferi;
void function(ALuint bid, ALenum param, ALint* value1, ALint* value2, ALint* value3) alGetBuffer3i;
void function(ALuint bid, ALenum param, ALint* values) alGetBufferiv;
void function(ALfloat value) alDopplerFactor;
void function(ALfloat value) alDopplerVelocity;
void function(ALfloat value) alSpeedOfSound;
void function(ALenum distanceModel) alDistanceModel;
